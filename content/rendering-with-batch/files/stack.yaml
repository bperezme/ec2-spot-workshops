Resources:
  CustomCloud9SsmCloud9Ec2EnvironmentF47DD48C:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      ImageId: amazonlinux-2023-x86_64
      InstanceType: t3.large
      Tags:
        - Key: stack-id
          Value:
            Ref: AWS::StackId
    Metadata:
      aws:cdk:path: RenderingWithBatch-C9Environment/CustomCloud9Ssm/Cloud9Ec2Environment
  CustomCloud9SsmEc2RoleCE9ACBCB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      RoleName: CustomCloud9SsmEc2Role
    Metadata:
      aws:cdk:path: RenderingWithBatch-C9Environment/CustomCloud9Ssm/Ec2Role/Resource
  CustomCloud9SsmEc2RoleDefaultPolicy92A07C4C:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - batch:CreateComputeEnvironment
              - batch:CreateJobQueue
              - batch:DeleteComputeEnvironment
              - batch:DeleteJobQueue
              - batch:DeregisterJobDefinition
              - batch:DescribeComputeEnvironments
              - batch:DescribeJobDefinitions
              - batch:DescribeJobQueues
              - batch:DescribeJobs
              - batch:ListJobs
              - batch:RegisterJobDefinition
              - batch:SubmitJob
              - batch:UpdateComputeEnvironment
              - batch:UpdateJobQueue
              - cloudformation:DescribeStacks
              - ec2:DescribeInstances
              - ec2:DescribeVolumesModifications
              - ec2:ModifyVolume
              - ecr:*
              - iam:PassRole
              - s3:DeleteObject
              - s3:ListBucket
              - s3:PutObject
              - states:StartExecution
            Effect: Allow
            Resource: "*"
          - Action: s3:*
            Effect: Allow
            Resource: arn:aws:s3:::cdk-*
          - Action: cloudformation:*
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:cloudformation:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :stack/CDKToolkit/*
              - Fn::Join:
                  - ""
                  - - "arn:aws:cloudformation:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :stack/RenderingWithBatch-Pipeline/*
        Version: "2012-10-17"
      PolicyName: CustomCloud9SsmEc2RoleDefaultPolicy92A07C4C
      Roles:
        - Ref: CustomCloud9SsmEc2RoleCE9ACBCB
    Metadata:
      aws:cdk:path: RenderingWithBatch-C9Environment/CustomCloud9Ssm/Ec2Role/DefaultPolicy/Resource
  CustomCloud9SsmEc2InstanceProfile167B6BF8:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: CustomCloud9SsmEc2RoleCE9ACBCB
    DependsOn:
      - CustomCloud9SsmEc2RoleDefaultPolicy92A07C4C
      - CustomCloud9SsmEc2RoleCE9ACBCB
    Metadata:
      aws:cdk:path: RenderingWithBatch-C9Environment/CustomCloud9Ssm/Ec2InstanceProfile
  CustomCloud9SsmSsmDocumentD052D5F9:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "2.2"
        description: Bootstrap Cloud9 EC2 instance
        mainSteps:
          - name: DeployCDKFromTar
            action: aws:runShellScript
            inputs:
              runCommand:
                - "#!/bin/bash"
                - echo '=== Installing CDK and virtualenv ==='
                - npm install -g --force aws-cdk
                - pip install virtualenv
                - echo '=== Downloading compressed CDK project ==='
                - wget https://raw.githubusercontent.com/bpguasch/ec2-spot-workshops/blender_rendering_using_batch/content/rendering-with-batch/files/cdk-project.tar.gz -O cdk-project.tar.gz
                - tar xzvf cdk-project.tar.gz
                - cd cdk-project
                - echo '=== Installing project dependencies ==='
                - virtualenv .venv
                - source .venv/bin/activate
                - pip install -r requirements.txt
                - echo '=== Bootstrapping AWS account ==='
                - cdk bootstrap --force
                - echo '=== Deploying CDK project ==='
                - cdk deploy RenderingWithBatch-Pipeline
          - name: ResizeEBS
            action: aws:runShellScript
            inputs:
              runCommand:
                - "#!/bin/bash"
                - echo '=== Installing jq ==='
                - sudo yum -y install jq
                - echo '=== Retrieving current region and Instance id ==='
                - token=$(curl -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds:21600')
                - export AWS_DEFAULT_REGION=$(curl -H "X-aws-ec2-metadata-token:$token" http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region')
                - instanceId=$(curl -H "X-aws-ec2-metadata-token:$token" http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.instanceId')
                - echo 'Region:' $AWS_DEFAULT_REGION
                - echo 'Instance id:' $instanceId
                - echo '=== Resizing EBS volume ==='
                - volumeId=$(aws ec2 describe-instances --instance-ids $instanceId | jq -r '.Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId')
                - echo 'Volume id:' $volumeId
                - aws ec2 modify-volume --volume-id $volumeId --size 100
                - echo '=== Waiting for the volume to enter the optimizing state ==='
                - while [ true ]
                - do
                - modificationState=$(aws ec2 describe-volumes-modifications --volume-ids $volumeId | jq -r '.VolumesModifications[0].ModificationState')
                - if [ $modificationState == "optimizing" ] ; then
                - break
                - fi
                - sleep 5
                - done
                - echo '=== Resizing file system ==='
                - sudo growpart /dev/xvda 1
                - sudo resize2fs $(df -h |awk '/^\/dev/{print $1}')
      DocumentType: Command
      Name: SsmDocument
    Metadata:
      aws:cdk:path: RenderingWithBatch-C9Environment/CustomCloud9Ssm/SsmDocument
  CustomCloud9SsmSsmAssociationABF443F9:
    Type: AWS::SSM::Association
    Properties:
      Name: SsmDocument
      Targets:
        - Key: tag:stack-id
          Values:
            - Ref: AWS::StackId
    DependsOn:
      - CustomCloud9SsmCloud9Ec2EnvironmentF47DD48C
      - CustomCloud9SsmSsmDocumentD052D5F9
    Metadata:
      aws:cdk:path: RenderingWithBatch-C9Environment/CustomCloud9Ssm/SsmAssociation
  CustomCloud9SsmProfileAttachLambdaFunctionServiceRoleF610D074:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: RenderingWithBatch-C9Environment/CustomCloud9Ssm/ProfileAttachLambdaFunction/ServiceRole/Resource
  CustomCloud9SsmProfileAttachLambdaFunctionServiceRoleDefaultPolicy9CC20561:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:AssociateIamInstanceProfile
              - ec2:DescribeInstances
              - ec2:RebootInstances
              - ec2:ReplaceIamInstanceProfileAssociation
              - iam:ListInstanceProfiles
              - iam:PassRole
              - ssm:DescribeAssociationExecutionTargets
              - ssm:DescribeAssociationExecutions
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: CustomCloud9SsmProfileAttachLambdaFunctionServiceRoleDefaultPolicy9CC20561
      Roles:
        - Ref: CustomCloud9SsmProfileAttachLambdaFunctionServiceRoleF610D074
    Metadata:
      aws:cdk:path: RenderingWithBatch-C9Environment/CustomCloud9Ssm/ProfileAttachLambdaFunction/ServiceRole/DefaultPolicy/Resource
  CustomCloud9SsmProfileAttachLambdaFunction01DB4FFC:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import time


          def is_association_started(association_id):
              client = boto3.client('ssm')

              # Retrieve the execution history of the association
              response = client.describe_association_executions(
                  AssociationId=association_id,
                  Filters=[
                      {
                          'Key': 'Status',
                          'Value': 'Success',
                          'Type': 'EQUAL'
                      }
                  ]
              )

              # There are no executions yet
              if 'AssociationExecutions' not in response or not response['AssociationExecutions']:
                  return False

              # Retrieve the targets of the execution to see if the SSM agent has picked up the EC2 instance yet
              response = client.describe_association_execution_targets(
                  AssociationId=association_id,
                  ExecutionId=response['AssociationExecutions'][0]['ExecutionId']
              )

              return 'AssociationExecutionTargets' in response and response['AssociationExecutionTargets']


          def handler(event, context):
              if event['RequestType'] == 'Create':
                  # Extract context variables
                  stack_id = event['ResourceProperties']['stack_id']
                  profile_arn = event['ResourceProperties']['profile_arn']
                  association_id = event['ResourceProperties']['association_id']

                  try:
                      client = boto3.client('ec2')

                      # Retrieve EC2 instance's identifier
                      print('Retrieving EC2 instance Id')

                      instance_id = client.describe_instances(
                          Filters=[{'Name': 'tag:stack-id', 'Values': [stack_id]}]
                      )['Reservations'][0]['Instances'][0]['InstanceId']

                      # Associate the SSM instance profile
                      print('Associating the SSM instance profile to the instance')

                      client.associate_iam_instance_profile(
                          IamInstanceProfile={'Arn': profile_arn},
                          InstanceId=instance_id
                      )

                      # Reboot the instance to restart the SSM agent
                      print('Rebooting the instance so that the SSM agent picks up the association')

                      client.reboot_instances(
                          InstanceIds=[instance_id]
                      )

                      # Wait for the SSM association to be started
                      while True:
                          print('Waiting for the association to be started')

                          if is_association_started(association_id):
                              break
                          else:
                              time.sleep(5)
                  except Exception as e:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': e.args[0]})
                      return

              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CustomCloud9SsmProfileAttachLambdaFunctionServiceRoleF610D074
          - Arn
      Runtime: python3.11
      Timeout: 800
    DependsOn:
      - CustomCloud9SsmProfileAttachLambdaFunctionServiceRoleDefaultPolicy9CC20561
      - CustomCloud9SsmProfileAttachLambdaFunctionServiceRoleF610D074
    Metadata:
      aws:cdk:path: RenderingWithBatch-C9Environment/CustomCloud9Ssm/ProfileAttachLambdaFunction/Resource
  CustomCloud9SsmProfileAttachLambdaFunctionEventInvokeConfig09493354:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName:
        Ref: CustomCloud9SsmProfileAttachLambdaFunction01DB4FFC
      MaximumRetryAttempts: 0
      Qualifier: $LATEST
    Metadata:
      aws:cdk:path: RenderingWithBatch-C9Environment/CustomCloud9Ssm/ProfileAttachLambdaFunction/EventInvokeConfig/Resource
  CustomCloud9SsmCustomResourceCD940758:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomCloud9SsmProfileAttachLambdaFunction01DB4FFC
          - Arn
      stack_id:
        Ref: AWS::StackId
      profile_arn:
        Fn::GetAtt:
          - CustomCloud9SsmEc2InstanceProfile167B6BF8
          - Arn
      association_id:
        Fn::GetAtt:
          - CustomCloud9SsmSsmAssociationABF443F9
          - AssociationId
    DependsOn:
      - CustomCloud9SsmEc2InstanceProfile167B6BF8
      - CustomCloud9SsmSsmAssociationABF443F9
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: RenderingWithBatch-C9Environment/CustomCloud9Ssm/CustomResource/Default
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/2WNwW7CMBBEv4W7sy0gDhyRm0rcovQDkHFs2MbelbJ2ELLy75WLVJB6mjezo50NrLc7eF+ZmzR2GJuAZyhfydhRmZucig2chz1oTy3NODFFR6nVG4UmQuk5OKU9/WrHAe292icdSZIh67qJPQa3KJEIRXv6YJvrq1o6iLBFk5BpUcHE82CgfGayNamFP25nR+lIM49OM3m81Ou/cFlU74TzZJ3SWRLHp/X0ypppwMdud09Xprct7GG9+hbEZsqUMDroH/oDjYpGvioBAAA=
    Metadata:
      aws:cdk:path: RenderingWithBatch-C9Environment/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

